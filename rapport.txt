Projet Younes Mathis Peter

Projet : Coder un chat en prenant en compte l'aspect serveur et le côté client
Le client doit pouvoir envoyer des messages, et en recevoir dans sa fenêtre, sans que la page ne se rafraîchisse.
Le serveur doit pouvoir recevoir les messages et les envoyer à tous les clients connectés.
On avait d'abord essayé aveuglément de coder le chat en python tout en Django, mais on s'est rendu compte ce n'était pas pratique pour un chat de rafraîchir la page à l'envoi de chaque message, et un autre utilisateur ne verrait pas les nouveaux messages à moins qu'il ne rafraîchisse la page lui aussi.
On s'est donc tourné vers le javascript, et on a résolu ce problème en utilisant des requêtes ajax.
Les requêtes ajax permettent d'envoyer des informations vers la base de données, et d'en recevoir sans que la page ne se rafraîchisse.
Partie DJANGO :
Pour la création de compte et l’authentification, on utilise le module UserCreationForm de Django pour d’abord créer le modèle, puis les modules login et logout pour se connecter et se déconnecter.
On crée ensuite 2 modèles pour les messages et les salons. Le modèle Room ne possède qu’un champ, son nom, et le modèle Message en contient plusieurs : le contenu du message, l’envoyeur et le salon où il a été envoyé. Ces différents champs vont servir plus tard à différencier les tous les messages en fonction des salons dans lesquels ils ont été envoyés.
Partie JAVASCRIPT
On crée les templates dans lesquels on insère un formulaire pour envoyer les messages. A la soumission de ce formulaire, on envoie une requête ajax vers une url, et la vue associée à cette url se charge de sauvegarder le message dans la base de données.
Ensuite, on récupère tous les messages de la base de données avec une requête ajax vers le serveur, requête qui se fait toutes les 200ms. Cette requête envoie vers une url, et la vue associée liste tous les messages possibles, et les renvoie sous forme de liste, liste qu’on exploite dans la template.
Pour la gestion des droits, on effectue utilise encore ajax, la seule donnée qu’on récupère est le nom d’utilisateur, et la vue associée se charge d’enlever, ou de donner les droits de « superuser » à l’utilisateur.
Pour les fonctions de modération, il y a d’abord celle qui permet d’empêcher un utilisateur d’envoyer des messages. Pour cela, il y a deux groupes, un où les utilisateurs sont libres d’envoyer des messages, et l’autre où ils n’ont pas le droit. On utilise ajax, et on déplace l’utilisateur dans le groupe qu’on veut grâce à la vue associée. N’ayant pas réussi à manipuler les permissions des utilisateurs, on s’est tourné vers les groupes. Néanmoins, cela empêche l’utilisateur d’envoyer des messages quel que soit son salon.
On peut voulait aussi implémenter une fonction pour virer un utilisateur d’un salon, mais n’ayant pas réussi à faire exactement cette fonction, on a à la place fait crée une fonction qui bannit un utilisateur du salon, et l’empêche d’y accéder, en créant un groupe pour chaque salon, et en retirant l’utilisateur du groupe. Si un utilisateur banni essaie d’envoyer un message dans un salon où il est banni, il est redirigé vers la page d’accueil. Ainsi, l’administrateur ne peut que bannir un utilisateur du salon dans lequel il est.
L’utilisateur a la possibilité de modifier les messages qu’il a envoyé, et l’administrateur peut renommer un salon. S’il renomme un salon, les messages qui étaient dans ce salon sont tous supprimés et envoyés dans le nouveau salon. Si le nom du nouveau salon existe déjà, il y a une erreur.
